// Generated by view binder compiler. Do not edit!
package com.example.storesearching.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.storesearching.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutListitemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button button;

  @NonNull
  public final TextView textViewDes;

  @NonNull
  public final TextView textViewDis;

  @NonNull
  public final TextView textViewName;

  @NonNull
  public final TextView textViewNo;

  private LayoutListitemBinding(@NonNull LinearLayout rootView, @NonNull Button button,
      @NonNull TextView textViewDes, @NonNull TextView textViewDis, @NonNull TextView textViewName,
      @NonNull TextView textViewNo) {
    this.rootView = rootView;
    this.button = button;
    this.textViewDes = textViewDes;
    this.textViewDis = textViewDis;
    this.textViewName = textViewName;
    this.textViewNo = textViewNo;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutListitemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutListitemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_listitem, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutListitemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button;
      Button button = ViewBindings.findChildViewById(rootView, id);
      if (button == null) {
        break missingId;
      }

      id = R.id.textView_des;
      TextView textViewDes = ViewBindings.findChildViewById(rootView, id);
      if (textViewDes == null) {
        break missingId;
      }

      id = R.id.textView_dis;
      TextView textViewDis = ViewBindings.findChildViewById(rootView, id);
      if (textViewDis == null) {
        break missingId;
      }

      id = R.id.textView_name;
      TextView textViewName = ViewBindings.findChildViewById(rootView, id);
      if (textViewName == null) {
        break missingId;
      }

      id = R.id.textView_no;
      TextView textViewNo = ViewBindings.findChildViewById(rootView, id);
      if (textViewNo == null) {
        break missingId;
      }

      return new LayoutListitemBinding((LinearLayout) rootView, button, textViewDes, textViewDis,
          textViewName, textViewNo);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
